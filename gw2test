import urllib.request
import json
import collections
import datetime
import time

def get_daily_info(*styles, show_all=False):
	id_dict = get_dailies(*styles)
	skipped_id = {}
	ordered = ['pve','pvp','wvw','fractals','special']
	print ("GW2 Dailies\t"+check_time())
	url = 'https://api.guildwars2.com/v2/achievements?ids='	
	quest_dict = collections.OrderedDict()
	low_level_fractals = collections.OrderedDict()
	for style in id_dict:
		for id in id_dict[style]:
			url += '{},'.format(id)
			quest_dict[id] = []
	page = urllib.request.urlopen(url[:-1]).read().decode('utf-8', 'ignore')
	page = page.replace('â€”', '-')
	data = json.loads(page)
	counter = 0
	for style in id_dict:
		skipped_id[style] = []
		for quest in data:
			if quest['id'] in id_dict[style] and 'Tier' in quest['name'] and '4' not in quest['name']:
				low_level_fractals[quest['id']] = quest['name']
				skipped_id[style].append(quest['id'])
				id_dict[style].remove(quest['id'])
				counter += 1
			else:
				quest_dict[quest['id']] = quest['name']
	for style in id_dict:
		if len(id_dict[style]) > 0:
				print ("\t{} ({})".format(style.capitalize(), len(id_dict[style])))
				for quest in quest_dict:
					if quest in id_dict[style]:
						print ('ID: '+'{:4d}\t {}'.format(quest, quest_dict[quest]))
				if style == 'fractals' and show_all == True:
					print ()
					print ("{} dailies removed due to tier level <> 4. Include 'show_all=True' to show all dailies.".format(len(low_level_fractals)))
					for id in low_level_fractals:
						print ('ID: '+'{:4d}\t {}'.format(id, low_level_fractals[id]))
					print ()
				else:
					print ()

def get_dailies(*styles):
	dailies = json.loads(urllib.request.urlopen('https://api.guildwars2.com/v2/achievements/daily').read().decode('utf-8'))
	daily_id_dict = {'pvp': [], 'pve': [], 'wvw': [], 'fractals': [], 'special': []}
	if styles == ():
		return empty_search(dailies, daily_id_dict)
	else:
		maxlength = 0
		for style in styles:
			if style.lower() in daily_id_dict.keys():
				for x in dailies[style]:
					if x['id'] not in daily_id_dict[style]:
						daily_id_dict[style].append(x['id'])
					daily_id_dict[style].sort()
				maxlength = max(maxlength, len(daily_id_dict[style]))
			else:
				print ("Sorry, I didn't understand '{}'".format(style))
		if maxlength == 0:
			print ("Sorry, I couldn't understand any of the quest type(s) you entered: "+', '.join(x for x in styles))
			print ("Since you didn't pass me a useable quest type ("+', '.join(x for x in daily_id_dict.keys())+"), I will return all dailies.")
			print ()
			return empty_search(dailies, daily_id_dict)	
		else:
			return daily_id_dict
			
def empty_search(dailies, daily_id_dict):
	for style in daily_id_dict.keys():
			for x in dailies[style]:
				if x['id'] not in daily_id_dict[style]:
					daily_id_dict[style].append(x['id'])
					daily_id_dict[style].sort()
	return (daily_id_dict)
		
def check_time():
	diff = int(time.strftime('%z'))
	hours_diff = diff/100
	return " [Valid until 0:00 UTC (20:00 EST/17:00 PST) on {}]".format(datetime.datetime.utcnow().date().strftime('%A %m/%d/%y'))

get_daily_info(show_all=True)
